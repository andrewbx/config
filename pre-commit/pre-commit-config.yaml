# pre-commit-config.yaml
# v1.13
# Note: Tests can be skipped with env SKIP=id

# Default language and actions
default_language_version:
  python: python3
  perl: perl5.8

default_stages:
  - commit
  - push

default_install_hook_types:
  - pre-commit
  - post-commit

fail_fast: true

# Automatic fixing framework https://pre-commit.ci/
ci:
  autofix_prs: false
  autofix_commit_msg: '[pre-commit.ci] automatic fixes'
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit automatic update'
  autoupdate_schedule: 'weekly'
  skip: []
  submodules: false

# Begin pre-commit hook configuration
repos:
  - repo: meta
    hooks:
      - id: check-hooks-apply
      - id: check-useless-excludes

  # Hooks for remote repositories
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: forbid-new-submodules
        name: Forbid new submodules
      - id: no-commit-to-branch
        name: Don't commit to specific branch
        args: [
          '--branch', 'main',
          '--branch', 'dev'
        ]
      - id: check-yaml
        name: Check yaml file
      - id: check-json
        name: Check json file
      - id: check-xml
        name: Check xml file
      - id: trailing-whitespace
        name: Trim trailing whitespace
        args: [
          '--markdown-linebreak-ext=md,markdown'
        ]
        exclude: 'CHANGELOG.md|.html|.xml'
      - id: end-of-file-fixer
        name: Fix EOF with newline
        exclude: '.html|.xml'
      - id: check-added-large-files
        name: Check for large files
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-executables-have-shebangs
        name: Check non-binary executable scripts have shebangs
        exclude_types: [python]
      - id: check-shebang-scripts-are-executable
        name: Check shebang scripts are executable
        exclude_types: [python]
      - id: check-case-conflict
        name: Check case conflict
      - id: check-symlinks
        name: Check broken symlinks
      - id: requirements-txt-fixer
        name: Sort entries in requirements.txt
      - id: mixed-line-ending
        name: Check for mixed line endings
        args: [
          '--fix=lf'
        ]
        exclude: '.html|.xml'
      - id: detect-aws-credentials
        name: Detect AWS credentials
        args: [
          '--allow-missing-credentials'
        ]
      - id: detect-private-key
        name: Detect private keys

  # Hooks for local tools
  - repo: local
    hooks:

      # Python static type checker
      # https://mypy.readthedocs.io/en/stable/config_file.html
      # Install: brew install mypy
      - id: mypy
        name: Python static type check
        args: [
          '--ignore-missing-imports',
          '--install-types',
          '--non-interactive'
        ]
        entry: mypy
        language: system
        types: [python]

      # Python vulnerability check
      # https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing
      # Install: brew install bandit
      - id: bandit
        name: Python vulnerability check
        args: [
          '-l',
          '--recursive',
          '-x',
          'tests'
        ]
        entry: bandit
        language: system
        types: [python]
        files: .py$

      # Python Linter - PyLint
      # https://pylint.readthedocs.io/en/stable/user_guide/messages/messages_overview.html
      # Install: brew install pylint
      - id: pylint
        name: Python linter pylint
        description: Lint python code with pylint
        entry: pylint
        language: system
        types: [python]
        args: [
          '--disable=invalid-name,protected-access,too-many-public-methods,E0401',
          '--output-format=text',
          '--reports=no',
          '--ignore-mixin-members=yes',
          '--ignored-classes=SQLObject,_socketobject,ldap,netifaces,sh,brotli',
          '--generated-members=REQUEST,acl_users,aq_parent,args',
          '--init-import=no',
          '--good-names=ex,Run,_,f,i,j,k,m,n,__all__,__name__,__version__',
          '--bad-names=foo,bar,baz,toto,tutu,tata,l,O,I',
          '--dummy-variables-rgx=_$|dummy_|unused_',
          '--max-line-length=120',
          "--indent-string='    '"
        ]

      # Python Linter - flake8
      # https://pep8.readthedocs.io/en/latest/intro.html#error-codes
      # Install: brew install flake8
      - id: flake8
        name: Python linter flake8
        description: Lint python code with flake8
        entry: flake8
        args: [
          '--max-line-length=120',
          '--max-complexity=10',
          '--hang-closing',
          '--doctests',
          '--show-source',
          # W291: trailing whitespace
          # W503: line break before binary operator
          # E111: indentation is not a multiple of four
          # E114: indentation is not a multiple of four (comment)
          # E121: continuation line under-indented for hanging indent
          # E133: closing bracket is missing indentation
          # E203: whitespace before ‘,’, ‘;’, or ‘:’
          # E266: too many leading ‘#’ for block comment
          # E302: expected 2 blank lines, found 0
          # E402: module level import not at top of file
          # E501: line too long (82 > 79 characters)
          # F401: module imported but unused
          # F403: ‘from module import *’ used; unable to detect undefined names
          '--ignore=W291,W503,E111,E114,E121,E133,E203,E251,E266,E302,E402,E501,F401,F403',
          '--per-file-ignores=__init__.py:F401,F40',
          '--exclude=.git,__pycache__,docs/source/conf.py,old,build,dist',
          '--filename=*.py'
        ]
        language: system
        types: [python]

      # Python imports sorter
      # Install: brew install isort
      - id: isort
        name: Python imports sorter
        description: Sort imports in python code
        entry: isort
        args: [
          '--line-length=120',
          '--multi-line=3',
          '--force-grid-wrap=0',
          '--trailing-comma',
          '--use-parentheses',
          '--ensure-newline-before-comments'
        ]
        language: system
        types: [python]

      # Shellscript code checker
      # https://gist.github.com/nicerobot/53cee11ee0abbdc997661e65b348f375
      # Install: brew install shellcheck
      - id: shellcheck
        name: Shellscript checker
        description: Test shell scripts with shellcheck
        entry: shellcheck
        args: [
          # Suggest explicitly using -n in `[ $var ]`
          '--enable=avoid-nullary-conditions',
          # Suggest 'command -v' instead of 'which'
          '--enable=deprecate-which',
          # Suggest quoting variables without metacharacters
          '--enable=quote-safe-variables',
          # Require [[ and warn about [ in Bash/Ksh
          '--enable=require-double-brackets',
          # Suggest putting braces around all variable references
          '--enable=require-variable-braces',
          # Not following <file>
          '--exclude=SC1091',
          # In POSIX sh, 'local' is undefined
          '--exclude=SC2039',
          # Prefer [ p ] || [ q ] as [ p -o q ] is not well defined
          '--exclude=SC2166',
          # Variable is referenced but not assigned
          '--exclude=SC2154',
          # When used with -p, -m only applies to the deepest directory
          '--exclude=SC2174',
          # In POSIX sh, 'local' is undefined
          '--exclude=SC3043',
          # In POSIX sh, -ef is undefined
          '--exclude=SC3013',
          # In POSIX sh, read -p is undefined
          '--exclude=SC3045',
          # (info): Double quote to prevent globbing and word splitting
          '--exclude=SC2086',
          # (warning): Iterating over ls output is fragile. Use globs
          '--exclude=SC2045'
        ]
        language: system
        types: [shell]
        require_serial: true

      # Perl code formatter - PerlTidy
      # https://metacpan.org/dist/Perl-Tidy
      # Install: cpan install Perl::Tidy
      - id: perltidy
        name: Perl code formatter
        description: Cleanup perl formatting
        entry: perltidy
        args: [
          # Max line width is 78 columns
          '-l=78',
          # Indent level is 4 columns
          '-i=4',
          # Continuation indent is 4 columns
          '-ci=4',
          # Maximal vertical tightness
          '-vt=2',
          # No extra indentation for closing brackets
          '-cti=0',
          # Medium parenthesis tightness
          '-pt=1',
          # Medium brace tightness
          '-bt=1',
          # Medium square bracket tightness
          '-sbt=1',
          # Medium block brace tightness
          '-bbt=1',
          # No space before semicolons
          '-nsfs',
          # Don't outdent long quoted strings
          '-nolq',
          # Break before all operators
          '-wbb="% + - * / x != == >= <= =~ !~ < > | & >= < = **= += *= &= <<= &&= -= /= |= >>= ||= .= %= ^= x="'
        ]
        language: system
        types: [perl]

      # Perl code checker - PerlCritic
      # https://metacpan.org/dist/Perl-Critic
      # Install: cpan install Perl::Critic
      - id: perlcritic
        name: Perl code checker
        description: Lint perl code with perlcritic
        entry: perlcritic
        language: system
        types: [perl]

      # Dockerfile linter - Hadolint
      # https://github.com/hadolint/hadolint?tab=readme-ov-file#rules
      # Install: brew install hadolint
      - id: hadolint
        name: Hadolint linter Dockerfile
        description: Dockerfile linter, validate inline bash
        entry: hadolint
        args: [
          # Do not use apt, use apt-get or apt-cache instead
          '--ignore', 'DL3027',
          # Pin versions in apt-get install
          '--ignore', 'DL3008',
          # Pin the version explicitly to a release tag
          '--ignore', 'DL3007',
          # Set the SHELL option -o pipefail before RUN with a pipe in it
          '--ignore', 'DL4006',
          # Note that A && B || C is not if-then-else. C may run when A is true
          '--ignore', 'SC2015',
          # Specify version with zypper install -y <package>[=]<version>
          '--ignore', 'SC3037',
          # Pin versions in pip
          '--ignore', 'DL3013'
        ]
        language: system
        types: [dockerfile]

      # Terraform inspector using checkov
      # https://www.checkov.io/2.Basics/CLI%20Command%20Reference.html
      # Install: brew install checkov
      - id: terraform_checkov
        name: Terraform inspection with checkov
        description: Runs checkov inspection on Terraform templates
        entry: checkov
        args: [
          '--quiet',
          '--compact',
          '--framework', 'terraform,secrets',
          '-f'
        ]
        language: system
        files: \.tf$
        exclude: \.terraform/.*$
        require_serial: true
